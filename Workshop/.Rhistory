uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(z)
}
fit_test <- optim(c(1, 0.1), uniform.loglik, data = caterpillars)
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(z)
}
fit_test <- optim(c(2, 0.1), uniform.loglik, data = caterpillars)
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(-z)
}
fit_test <- optim(c(2, 0.1), uniform.loglik, data = caterpillars)
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(-z)
}
fit_test <- optim(c(1, 0.1), uniform.loglik, data = caterpillars)
fit_test
fit_1
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(-z)
}
set.seed(1)
nboot <- 5000
newLambda_test <- rep(0, nboot)
newP_test <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars_test <- sample(caterpillars, n, replace = T)
fit_test <- optim(c(1, 0.1), uniform.loglik, data = newCaterpillars)
newLambda_test[i] <- fit_test$par[1]
newP_i[i] <- fit_test$par[2]
}
# hist(newLambda_i)
seLambda_test <- sd(newLambda_test)
seP_test <- sd(newP_test)
cat(" seLambda_test: ", seLambda_test, "\n", "seP_test: ", seP_test, "\n\n")
ciLambda_test <- quantile(newLambda_test, c(0.025, 0.975))
ciP_test <- quantile(newP_test, c(0.025, 0.975))
cat(" ciLambda_test: [", ciLambda_test[1], ",", ciLambda_test[2], "]\n", " ciP_test: [", ciP_test[1], ",", ciP_test[2], "]\n", sep = "")
seLambda_test
seLambda_test
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(-z)
}
set.seed(1)
nboot <- 5000
newLambda_test <- rep(0, nboot)
newP_test <- rep(0, nboot)
n <- length(caterpillars)
library(tidyverse)
setwd("~/R/MATH551/Quiz/Quiz4/")
load("../M551Quiz2018.Rdata")
source("../hessian.R")
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(-z)
}
set.seed(1)
nboot <- 5000
newLambda_test <- rep(0, nboot)
newP_test <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars_test <- sample(caterpillars, n, replace = T)
fit_test <- optim(c(1, 0.1), uniform.loglik, data = newCaterpillars_test)
newLambda_test[i] <- fit_test$par[1]
newP_i[i] <- fit_test$par[2]
}
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(-z)
}
set.seed(1)
nboot <- 5000
newLambda_test <- rep(0, nboot)
newP_test <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars_test <- sample(caterpillars, n, replace = T)
fit_test <- optim(c(1, 0.1), uniform.loglik, data = newCaterpillars_test)
newLambda_test[i] <- fit_test$par[1]
newP_test[i] <- fit_test$par[2]
}
# hist(newLambda_i)
seLambda_test <- sd(newLambda_test)
seP_test <- sd(newP_test)
cat(" seLambda_test: ", seLambda_test, "\n", "seP_test: ", seP_test, "\n\n")
ciLambda_test <- quantile(newLambda_test, c(0.025, 0.975))
ciP_test <- quantile(newP_test, c(0.025, 0.975))
cat(" ciLambda_test: [", ciLambda_test[1], ",", ciLambda_test[2], "]\n", " ciP_test: [", ciP_test[1], ",", ciP_test[2], "]\n", sep = "")
library(tidyverse)
setwd("~/R/MATH551/Quiz/Quiz4/")
load("../M551Quiz2018.Rdata")
source("../hessian.R")
caterpillar_negproflik <- function(lambda, data, choice = 1) {
# if you would like to return negative result, then you can rewrite as "choice = -1".
z <- sum(
log(
(factorial(data + lambda - 1) / (factorial(data) * factorial(lambda - 1))) * ((1 - lambda / (mean(data) + lambda))^data) * ((lambda / (mean(data) + lambda))^lambda)
)
)
if (choice > 0) {
return(z)
}
else{
return(-z)
}
}
fit_1 <- optim(2, caterpillar_negproflik, method = "Brent", lower = 0.2, upper = 200, data = caterpillars, choice = -1)
set.seed(1)
nboot <- 5000
newLambda_i <- rep(0, nboot)
newP_i <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars_i <- sample(caterpillars, n, replace = T)
newLambda_i[i] <- optim(2, caterpillar_negproflik, method = "Brent", lower = 2, upper = 50, data = newCaterpillars_i, choice = -1, hessian = TRUE)$par
newP_i[i] <- newLambda_i[i] / (mean(newCaterpillars) + newLambda_i[i])
}
fit_1 <- optim(2, caterpillar_negproflik, method = "Brent", lower = 0.2, upper = 200, data = caterpillars, choice = -1)
set.seed(1)
nboot <- 5000
newLambda_i <- rep(0, nboot)
newP_i <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars_i <- sample(caterpillars, n, replace = T)
newLambda_i[i] <- optim(2, caterpillar_negproflik, method = "Brent", lower = 2, upper = 50, data = newCaterpillars_i, choice = -1, hessian = TRUE)$par
newP_i[i] <- newLambda_i[i] / (mean(newCaterpillars_ii) + newLambda_i[i])
}
fit_1 <- optim(2, caterpillar_negproflik, method = "Brent", lower = 0.2, upper = 200, data = caterpillars, choice = -1)
set.seed(1)
nboot <- 5000
newLambda_i <- rep(0, nboot)
newP_i <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars_i <- sample(caterpillars, n, replace = T)
newLambda_i[i] <- optim(2, caterpillar_negproflik, method = "Brent", lower = 2, upper = 50, data = newCaterpillars_i, choice = -1, hessian = TRUE)$par
newP_i[i] <- newLambda_i[i] / (mean(newCaterpillars_i) + newLambda_i[i])
}
# hist(newLambda_i)
seLambda_i <- sd(newLambda_i)
seP_i <- sd(newP_i)
cat(" seLambda_i: ", seLambda_i, "\n", "seP_i: ", seP_i, "\n\n")
ciLambda_i <- quantile(newLambda_i, c(0.025, 0.975))
ciP_i <- quantile(newP_i, c(0.025, 0.975))
cat(" ciLambda_i: [", ciLambda_i[1], ",", ciLambda_i[2], "]\n", " ciP_i: [", ciP_i[1], ",", ciP_i[2], "]\n", sep = "")
library(tidyverse)
setwd("~/R/MATH551/Quiz/Quiz4/")
load("../M551Quiz2018.Rdata")
source("../hessian.R")
set.seed(1)
nboot <- 5000
newLambda_ii <- rep(0, nboot)
newP_ii <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars_ii <- rnbinom(n,5.029,0.793)
newLambda_ii[i] <- optim(2, caterpillar_negproflik, method = "Brent", lower = 2, upper = 50, data = newCaterpillars_ii, choice = -1, hessian = TRUE)$par
newP_ii[i] <- newLambda_ii[i] / (mean(newCaterpillars_ii) + newLambda_ii[i])
}
caterpillar_negproflik <- function(lambda, data, choice = 1) {
# if you would like to return negative result, then you can rewrite as "choice = -1".
z <- sum(
log(
(factorial(data + lambda - 1) / (factorial(data) * factorial(lambda - 1))) * ((1 - lambda / (mean(data) + lambda))^data) * ((lambda / (mean(data) + lambda))^lambda)
)
)
if (choice > 0) {
return(z)
}
else{
return(-z)
}
}
set.seed(1)
nboot <- 5000
newLambda_ii <- rep(0, nboot)
newP_ii <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars_ii <- rnbinom(n,5.029,0.793)
newLambda_ii[i] <- optim(2, caterpillar_negproflik, method = "Brent", lower = 2, upper = 50, data = newCaterpillars_ii, choice = -1, hessian = TRUE)$par
newP_ii[i] <- newLambda_ii[i] / (mean(newCaterpillars_ii) + newLambda_ii[i])
}
# hist(newLambda_ii)
seLambda_ii <- sd(newLambda_ii)
seP_ii <- sd(newP_ii)
cat(" seLambda_ii:", seLambda_ii, "\n", "seP_ii:", seP_ii, "\n\n")
ciLambda_ii <- quantile(newLambda_ii, c(0.025, 0.975))
ciP_ii <- quantile(newP_ii, c(0.025, 0.975))
cat(" ciLambda_ii: [", ciLambda_ii[1], ",", ciLambda_ii[2], "]\n", " ciP_ii: [", ciP_ii[1], ",", ciP_ii[2], "]\n", sep = "")
runif
page(runif)
runif
rnorm
rexp
rbinom()
rbinom
rnbinom
methods(runif())
methods(runif
)
showMethods(runif)
getMethod(runif)
getMethod("runif")
runif
library(tidyverse)
df_3 <- read.csv("data3.csv", header = T)
df_3$type <- factor(df_3$type)
df_3$year <- factor(df_3$year)
df_3$period <- factor(df_3$period)
df_4 <- read.csv("data4.csv", header = T)
df_4_A <- df_4
df_4_B <- df_4
df_4_B$Exposure <- factor(df_4_B$Exposure)
df_4_B$Rel.Hum <- factor(df_4_B$Rel.Hum)
df_4_B$Temp <- factor(df_4_B$Temp)
fit_4_A <- glm(Deaths ~ Species + Exposure + Rel.Hum + Temp, family = binomial(link = "logit"), data = df_4_A)
fit_4_A <- glm(Deaths ~ Species + Exposure + Rel.Hum + Temp, family = binomial(link = "logit"), data = df_4_A)
df_4$Deaths
fit_4_A <- glm(Deaths ~ Species + Exposure + Rel.Hum + Temp, family = binomial(link = "probit"), data = df_4_A)
fit_4_A <- glm(Deaths ~ Species + Exposure + Rel.Hum + Temp, family = binomial(link = "logit"), data = df_4_A)
df_4$N
df_4$Deaths / df_4$N
df_4 <- read.csv("data4.csv", header = T)
df_4$Deaths_Rate <- df_4$Deaths / df_4$N
df_4_A <- df_4
df_4_B <- df_4
df_4_B$Exposure <- factor(df_4_B$Exposure)
df_4_B$Rel.Hum <- factor(df_4_B$Rel.Hum)
df_4_B$Temp <- factor(df_4_B$Temp)
fit_4_A <- glm(Deaths_Rate ~ Species + Exposure + Rel.Hum + Temp, family = binomial(link = "logit"), data = df_4_A)
summary.glm(fit_4_A)
fit_4_B <- glm(Deaths_Rate ~ Species + Exposure + Rel.Hum + Temp, family = binomial(link = "logit"), data = df_4_B)
summary(fit_4_B)
anova(fit_4_A, fit_4_B)
fit_4_B <- glm(Deaths_Rate ~ Species + Exposure + Rel.Hum + Temp, family = binomial(link = "logit"), data = df_4_B)
summary.glm(fit_4_B)
anova_fit_4_A_fit_4_B <- anova(fit_4_A, fit_4_B)
summary(anova_fit_4_A_fit_4_B)
anova_fit_4_A_fit_4_B <- anova(fit_4_A, fit_4_B)
anova_fit_4_A_fit_4_B
anova_fit_4_A_fit_4_B
library(epicalc)
install.packages("epicalc")
version
library(epicalc)
install.packages("epicalc")
lrtest
setwd("~/R/MATH551/Workshop")
beta.full.loglik <- function(par,data){
if(par[1] < 0 | par[2] < 0){
return(-10^10) }
else{
z <- sum(dbeta(data,par[1],par[2],log=T)) return(z)
}
}
beta.full.loglik <- function(par,data){
if(par[1] < 0 | par[2] < 0){
return(-10^10)
}
else{
z <- sum(dbeta(data,par[1],par[2],log=T)) return(z)
}
}
beta.full.loglik <- function(par,data){
if(par[1] < 0 | par[2] < 0){
return(-10^10)
}
else{
z <- sum(dbeta(data,par[1],par[2],log=T)) return(z)
}
}
beta.full.loglik <- function(par,data) {
if (par[1] < 0 | par[2] < 0) {
return(-10^10)
}
else{
z <- sum(dbeta(data,par[1],par[2],log=T))
return(z)
}
}
load("../Data/workshopData.Rdata")
beta.full.loglik(c(0.8,6),data=appointments2$Proportion)
load("./workshopData.Rdata")
beta.full.loglik(c(0.8,6),data=appointments2$Proportion)
alphas <- seq(0.5,2.5,length=100)
betas <- seq(1.5,9,length=100)
llh <- matrix(0,nrow=length(alphas),ncol=length(betas))
for(i in 1:length(alphas)){
for(i in 1:length(alphas)){
for(i in 1:length(alphas)) {
llh[i,j] <- beta.full.loglik(c(alphas[i],betas[j]),appointments2$Prop
}
}
lvls <- max(llh)-c(0:6)
contour(alphas,betas,llh,levels=lvls,xlab="alpha",ylab="beta")
beta.full.negloglik <- function(par,data){
z <- beta.full.loglik(par,data) return(-z)
}
S <- optim(c(0.1,0.1),beta.full.negloglik,data=appointments2$Proportion)
S$par
source("../hessian.R")
H <- hess(beta.full.negloglik,S$par,appointments2$Proportion) SEs=sqrt(diag(solve(H)))
SEs
Tb=(S$par[2]-5)/SEs[2]
pvalue=2*pnorm(Tb) ## if instead betahat>5 use 2*(1-pnorm(Tb)) pvalue
for(i in 1:length(alphas)) {
llh[i,j] <- beta.full.loglik(c(alphas[i],betas[j]),appointments2$Prop
}
}
lvls <- max(llh)-c(0:6)
contour(alphas,betas,llh,levels=lvls,xlab="alpha",ylab="beta")
beta.full.negloglik <- function(par,data){
z <- beta.full.loglik(par,data) return(-z)
}
S <- optim(c(0.1,0.1),beta.full.negloglik,data=appointments2$Proportion)
S$par
source("../hessian.R")
H <- hess(beta.full.negloglik,S$par,appointments2$Proportion) SEs=sqrt(diag(solve(H)))
SEs
Tb=(S$par[2]-5)/SEs[2]
pvalue=2*pnorm(Tb) ## if instead betahat>5 use 2*(1-pnorm(Tb)) pvalue
for(i in 1:length(alphas)) {
for(i in 1:length(alphas)) {
llh[i,j] <- beta.full.loglik(c(alphas[i],betas[j]),appointments2$Prop;
}
}
lvls <- max(llh)-c(0:6)
contour(alphas,betas,llh,levels=lvls,xlab="alpha",ylab="beta")
beta.full.negloglik <- function(par,data){
z <- beta.full.loglik(par,data) return(-z)
}
S <- optim(c(0.1,0.1),beta.full.negloglik,data=appointments2$Proportion)
S$par
source("../hessian.R")
H <- hess(beta.full.negloglik,S$par,appointments2$Proportion) SEs=sqrt(diag(solve(H)))
SEs
Tb=(S$par[2]-5)/SEs[2]
pvalue=2*pnorm(Tb) ## if instead betahat>5 use 2*(1-pnorm(Tb)) pvalue
llh <- matrix(0,nrow=length(alphas),ncol=length(betas))
llh
for(i in 1:length(alphas)) {
for (j in 1:length(betas)) {
llh[i,j] <- beta.full.loglik(c(alphas[i],betas[j]),appointments2$Prop;
}
}
for(i in 1:length(alphas)) {
for (j in 1:length(betas)) {
llh[i,j] <- beta.full.loglik(c(alphas[i],betas[j]),appointments2$Prop)
}
}
lvls <- max(llh)-c(0:6)
contour(alphas,betas,llh,levels=lvls,xlab="alpha",ylab="beta")
beta.full.negloglik <- function(par,data){
z <- beta.full.loglik(par,data) return(-z)
}
beta.full.negloglik <- function(par,data){
z <- beta.full.loglik(par,data) return(-z))
}
beta.full.negloglik <- function(par,data){
z <- beta.full.loglik(par,data)
return(-z)
}
S <- optim(c(0.1,0.1),beta.full.negloglik,data=appointments2$Proportion)
S$par
source("../Quiz/hessian.R")
H <- hess(beta.full.negloglik,S$par,appointments2$Proportion) SEs=sqrt(diag(solve(H)))
H <- hess(beta.full.negloglik,S$par,appointments2$Proportion)
SEs=sqrt(diag(solve(H)))
SEs
source("../Quiz/hessian.R")
H <- hess(beta.full.negloglik,S$par,appointments2$Proportion)
SEs=sqrt(diag(solve(H)))
SEs
beta.full.loglik <- function(par,data) {
if (par[1] < 0 | par[2] < 0) {
return(-10^10)
}
else{
z <- sum(dbeta(data,par[1],par[2],log=T))
return(z)
}
}
load("./workshopData.Rdata")
beta.full.loglik(c(0.8,6),data=appointments2$Proportion)
alphas <- seq(0.5,2.5,length=100)
betas <- seq(1.5,9,length=100)
llh <- matrix(0,nrow=length(alphas),ncol=length(betas))
for(i in 1:length(alphas)) {
for (j in 1:length(betas)) {
llh[i,j] <- beta.full.loglik(c(alphas[i],betas[j]),appointments2$Prop)
}
}
lvls <- max(llh)-c(0:6)
contour(alphas,betas,llh,levels=lvls,xlab="alpha",ylab="beta")
beta.full.negloglik <- function(par,data){
z <- beta.full.loglik(par,data)
return(-z)
}
S <- optim(c(0.1,0.1),beta.full.negloglik,data=appointments2$Proportion)
S$par
source("../Quiz/hessian.R")
H <- hess(beta.full.negloglik,S$par,appointments2$Proportion)
SEs=sqrt(diag(solve(H)))
SEs
install.packages("lmtest")
lmtest
library(tidyverse)
library(lmtest)
lrtest
anova_fit_4_A_fit_4_B <- anova(fit_4_A, fit_4_B)
library(tidyverse)
library(lmtest)
df_3 <- read.csv("data3.csv", header = T)
df_3$type <- factor(df_3$type)
df_3$year <- factor(df_3$year)
df_3$period <- factor(df_3$period)
fit_3 <- glm(incidents ~ service + type + year + period, family = poisson(link = "log"), data = df_3)
summary.glm(fit_3)
typeB <- as.double(coef(fit_3)["typeB"])
typeE <- as.double(coef(fit_3)["typeE"])
typeB / typeE
fit_3_1 <- glm(incidents ~ service + type, family = poisson(link = "log"), data = df_3)
summary.glm(fit_3_1)
typeB_1 <- abs(as.double(coef(fit_3_1)["typeB"]))
type_Total_1_intercept <- sum(sapply(coef(fit_3_1), abs))
typeB_1 / type_Total_1_intercept
type_Total_1_no_intercept <- sum(sapply(coef(fit_3_1)[-1], abs))
typeB_1 / type_Total_1_no_intercept
df_4 <- read.csv("data4.csv", header = T)
df_4$Deaths_Rate <- df_4$Deaths / df_4$N
df_4_A <- df_4
df_4_B <- df_4
df_4_B$Exposure <- factor(df_4_B$Exposure)
df_4_B$Rel.Hum <- factor(df_4_B$Rel.Hum)
df_4_B$Temp <- factor(df_4_B$Temp)
fit_4_A <- glm(Deaths_Rate ~ Species + Exposure + Rel.Hum + Temp, family = binomial(link = "logit"), data = df_4_A)
summary.glm(fit_4_A)
fit_4_B <- glm(Deaths_Rate ~ Species + Exposure + Rel.Hum + Temp, family = binomial(link = "logit"), data = df_4_B)
summary.glm(fit_4_B)
anova_fit_4_A_fit_4_B <- anova(fit_4_A, fit_4_B)
# anova_fit_4_A_fit_4_B
likelihood_ratio <- lrtest(fit_4_A, fit_4_B)
likelihood_ratio
lrtest(fit_4_A)
lrtest(fit_4_B)
help("lrtest")
