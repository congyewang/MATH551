ll3=sum(lfactorial(datavec+lambda-1)-lfactorial(datavec)-lfactorial(lambda-1))
return(lli+ll2+ll3)
}
caterpillar_ll(c(4,0.25), caterpillars)
caterpillar_ll(c(3,0.5), caterpillars)
caterpillar_ll(c(3,0.5), caterpillars)
caterpillar_proflik <- function(lambda,datavec){
n=length(datavec)
s1=sum(datavec)
phat=n*lambda/(n*lambda+s1)
return(caterpillar_ll(c(lambda,phat),datavec))
}
caterpillar_negproflik <- function(lambda, datavec){
n=length(datavec)
s1=sum(datavec)
phat=n*lambda/(n*lambda+s1)
z = (caterpillar_ll(c(lambda,phat),datavec))
return(-z)
}
optim_caterpillar_negproflik <- optim(1, caterpillar_negproflik, method = "Brent", lower = 0.2, upper = 200, hessian = TRUE, data = caterpillars)
print(c(optim_caterpillar_negproflik$par, -optim_caterpillar_negproflik$value))## because it is a negative likelihood I add a -
# prints maximum value of regular log  (MLE for log likelihood should be negative)
nboot=5000 # sample (5000 bootstraps)
newlambda <- rep(0,nboot) # empty vector for bootstrapped lambdas
newphat <- rep(0,nboot) # empty vector for bootstrapped phats
n <- length(caterpillars) # number of data in actual dataset
for (i in 1:nboot){ # each of the 5000 times we do the following
newcaterpillars <- sample(caterpillars,n,replace=T) # sample a new vector with 200 caterpillars from the original vector
# (the actual data), size n (200), with replacement
newlambda[i] <- 5.027024/mean(newcaterpillars)
newphat[i] <- 5.027024*newlambda[i] # this is probably wrong, but we care about the lambda estimate, so doesn't matter
}
hist(newlambda) # histogram of the MLEs from the bootstrapped datasets (shows the spread of them)
selambda <- sd(newlambda) # standard error of theta MLEs
sephat <- sd(newphat) # standard error of phi MLEs
print(c(selambda,sephat))
cilambda <- quantile(newlambda,c(0.025,0.975)) # quantiles, bootstrap sample of lambdas
ciphat <- quantile(newphat,c(0.025,0.975))  # quantiles, bootstrap sample of phats; this is not needed
print(cilambda)
print(ciphat) # note that this is not needed
nbootp=5000 # sample (5000 bootstraps)
newlambdap <- rep(0,nbootp) # empty vector for bootstrapped lambdaps (parametric)
newphatp <- rep(0,nbootp) # empty vector for bootstrapped phatps (parametric)
n <- length(caterpillars) # number of data in actual dataset
for(i in 1:nbootp){ # each of the 5000 times we do the following
newcaterpillarsp <- rnbinom(n,5.029,0.793) # New vector of size n, but instead of resampling from the original, we sample                                     # from rnbinom because that is what Chris specified; sample of size n, lambdahat,phat
#
# Everything else is exactly the same.
newlambdap[i] <- 5.027024/mean(newcaterpillarsp)
newphatp[i] <- 5.027024*newlambdap[i] # this is probably wrong, but we care about the lambda estimate, so doesn't matter
}
hist(newlambdap)
selambdap <- sd(newlambdap) # standard error of theta MLEs
sephatp <- sd(newphatp) # standard error of phi MLEs; this is not needed
print(c(selambdap,sephatp))
cilambdap <- quantile(newlambdap,c(0.025,0.975)) # quantiles, bootstrap sample of lambdas
ciphatp <- quantile(newphatp,c(0.025,0.975))  # quantiles, bootstrap sample of phats; this is not needed
print(cilambdap)
print(ciphatp) # this is not needed
set.seed(123456789)
survTime<-rexp(10,rate=0.4)
thetahat=1/mean(survTime)
phihat= exp(-4*thetahat) print(c(thetahat,phihat))
nboot=1000
newTheta <- rep(0,nboot) newPhi <- rep(0,nboot)
set.seed(123456789)
survTime<-rexp(10,rate=0.4)
thetahat=1/mean(survTime)
phihat= exp(-4*thetahat) print(c(thetahat,phihat))
set.seed(123456789)
survTime<-rexp(10,rate=0.4)
thetahat=1/mean(survTime)
phihat= exp(-4*thetahat)
print(c(thetahat,phihat))
set.seed(123456789)
survTime<-rexp(10,rate=0.4)
thetahat=1/mean(survTime)
phihat= exp(-4*thetahat)
print(c(thetahat,phihat))
nboot=1000
newTheta <- rep(0,nboot)
newPhi <- rep(0,nboot)
n <- length(survTime)
for (i in 1:nboot){
newSurv <- sample(survTime,n,replace=T) newTheta[i] <- 1/mean(newSurv) newPhi[i] <- exp(-4*newTheta[i])
}
hist(newTheta)
nboot=1000
newTheta <- rep(0,nboot)
newPhi <- rep(0,nboot)
n <- length(survTime)
for (i in 1:nboot){
newSurv <- sample(survTime,n,replace=T)
newTheta[i] <- 1/mean(newSurv)
newPhi[i] <- exp(-4*newTheta[i])
}
hist(newTheta)
seTheta <- sd(newTheta)
sePhi <- sd(newPhi)
print(c(seTheta,sePhi))
hist(newTheta)
seTheta <- sd(newTheta)
sePhi <- sd(newPhi)
print(c(seTheta,sePhi))
for (i in 1:nboot){
newSurv <- sample(survTime,n,replace=T)
# newSurv <- rexp(n,rate=thetahat)
newTheta[i] <- 1/mean(newSurv)
newPhi[i] <- exp(-4*newTheta[i])
}
hist(newTheta)
set.seed(123456789)
survTime<-rexp(10,rate=0.4)
thetahat=1/mean(survTime)
phihat= exp(-4*thetahat)
print(c(thetahat,phihat))
nboot=1000
newTheta <- rep(0,nboot)
newPhi <- rep(0,nboot)
n <- length(survTime)
for (i in 1:nboot){
newSurv <- sample(survTime,n,replace=T)
# newSurv <- rexp(n,rate=thetahat)
newTheta[i] <- 1/mean(newSurv)
newPhi[i] <- exp(-4*newTheta[i])
}
hist(newTheta)
seTheta <- sd(newTheta)
sePhi <- sd(newPhi)
print(c(seTheta,sePhi))
nboot=5000
newTheta <- rep(0,nboot)
newPhi <- rep(0,nboot)
n <- length(survTime)
for (i in 1:nboot){
newSurv <- sample(survTime,n,replace=T)
# newSurv <- rexp(n,rate=thetahat)
newTheta[i] <- 1/mean(newSurv)
newPhi[i] <- exp(-4*newTheta[i])
}
hist(newTheta)
library(tidyverse)
setwd("~/R/MATH551/Quiz/Quiz4/")
load("../M551Quiz2018.Rdata")
source("../hessian.R")
caterpillar_negproflik <- function(lambda, data, choice = 1) {
# if you would like to return negative result, then you can rewrite as "choice = -1".
z <- sum(
log(
(factorial(data + lambda - 1) / (factorial(data) * factorial(lambda - 1))) * ((1 - lambda / (mean(data) + lambda))^data) * ((lambda / (mean(data) + lambda))^lambda)
)
)
if (choice > 0) {
return(z)
}
else{
return(-z)
}
}
fit_1 <- optim(2, caterpillar_negproflik, method = "Brent", lower = 0.2, upper = 200, data = caterpillars, choice = -1)
set.seed(1)
nboot <- 5000
newLambda_i <- rep(0, nboot)
newP_i <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars <- sample(caterpillars, n, replace = T)
newLambda_i[i] <- optim(2, caterpillar_negproflik, method = "Brent", lower = 2, upper = 50, data = newCaterpillars, choice = -1, hessian = TRUE)$par
newP_i[i] <- newLambda_i[i] / (mean(newCaterpillars) + newLambda_i[i])
}
# hist(newLambda_i)
seLambda_i <- sd(newLambda_i)
seP_i <- sd(newP_i)
cat(" seLambda_i: ", seLambda_i, "\n", "seP_i: ", seP_i, "\n\n")
ciLambda_i <- quantile(newLambda_i, c(0.025, 0.975))
ciP_i <- quantile(newP_i, c(0.025, 0.975))
cat(" ciLambda_i: [", ciLambda_i[1], ",", ciLambda_i[2], "]\n", " ciP_i: [", ciP_i[1], ",", ciP_i[2], "]\n", sep = "")
hist(newLambda_i)
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(z)
}
fit_test <- optim(c(1, 0.1), uniform.loglik, data = caterpillars)
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(z)
}
fit_test <- optim(c(2, 0.1), uniform.loglik, data = caterpillars)
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(-z)
}
fit_test <- optim(c(2, 0.1), uniform.loglik, data = caterpillars)
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(-z)
}
fit_test <- optim(c(1, 0.1), uniform.loglik, data = caterpillars)
fit_test
fit_1
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(-z)
}
set.seed(1)
nboot <- 5000
newLambda_test <- rep(0, nboot)
newP_test <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars_test <- sample(caterpillars, n, replace = T)
fit_test <- optim(c(1, 0.1), uniform.loglik, data = newCaterpillars)
newLambda_test[i] <- fit_test$par[1]
newP_i[i] <- fit_test$par[2]
}
# hist(newLambda_i)
seLambda_test <- sd(newLambda_test)
seP_test <- sd(newP_test)
cat(" seLambda_test: ", seLambda_test, "\n", "seP_test: ", seP_test, "\n\n")
ciLambda_test <- quantile(newLambda_test, c(0.025, 0.975))
ciP_test <- quantile(newP_test, c(0.025, 0.975))
cat(" ciLambda_test: [", ciLambda_test[1], ",", ciLambda_test[2], "]\n", " ciP_test: [", ciP_test[1], ",", ciP_test[2], "]\n", sep = "")
seLambda_test
seLambda_test
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(-z)
}
set.seed(1)
nboot <- 5000
newLambda_test <- rep(0, nboot)
newP_test <- rep(0, nboot)
n <- length(caterpillars)
library(tidyverse)
setwd("~/R/MATH551/Quiz/Quiz4/")
load("../M551Quiz2018.Rdata")
source("../hessian.R")
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(-z)
}
set.seed(1)
nboot <- 5000
newLambda_test <- rep(0, nboot)
newP_test <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars_test <- sample(caterpillars, n, replace = T)
fit_test <- optim(c(1, 0.1), uniform.loglik, data = newCaterpillars_test)
newLambda_test[i] <- fit_test$par[1]
newP_i[i] <- fit_test$par[2]
}
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(-z)
}
set.seed(1)
nboot <- 5000
newLambda_test <- rep(0, nboot)
newP_test <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars_test <- sample(caterpillars, n, replace = T)
fit_test <- optim(c(1, 0.1), uniform.loglik, data = newCaterpillars_test)
newLambda_test[i] <- fit_test$par[1]
newP_test[i] <- fit_test$par[2]
}
# hist(newLambda_i)
seLambda_test <- sd(newLambda_test)
seP_test <- sd(newP_test)
cat(" seLambda_test: ", seLambda_test, "\n", "seP_test: ", seP_test, "\n\n")
ciLambda_test <- quantile(newLambda_test, c(0.025, 0.975))
ciP_test <- quantile(newP_test, c(0.025, 0.975))
cat(" ciLambda_test: [", ciLambda_test[1], ",", ciLambda_test[2], "]\n", " ciP_test: [", ciP_test[1], ",", ciP_test[2], "]\n", sep = "")
library(tidyverse)
setwd("~/R/MATH551/Quiz/Quiz4/")
load("../M551Quiz2018.Rdata")
source("../hessian.R")
caterpillar_negproflik <- function(lambda, data, choice = 1) {
# if you would like to return negative result, then you can rewrite as "choice = -1".
z <- sum(
log(
(factorial(data + lambda - 1) / (factorial(data) * factorial(lambda - 1))) * ((1 - lambda / (mean(data) + lambda))^data) * ((lambda / (mean(data) + lambda))^lambda)
)
)
if (choice > 0) {
return(z)
}
else{
return(-z)
}
}
fit_1 <- optim(2, caterpillar_negproflik, method = "Brent", lower = 0.2, upper = 200, data = caterpillars, choice = -1)
set.seed(1)
nboot <- 5000
newLambda_i <- rep(0, nboot)
newP_i <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars_i <- sample(caterpillars, n, replace = T)
newLambda_i[i] <- optim(2, caterpillar_negproflik, method = "Brent", lower = 2, upper = 50, data = newCaterpillars_i, choice = -1, hessian = TRUE)$par
newP_i[i] <- newLambda_i[i] / (mean(newCaterpillars) + newLambda_i[i])
}
fit_1 <- optim(2, caterpillar_negproflik, method = "Brent", lower = 0.2, upper = 200, data = caterpillars, choice = -1)
set.seed(1)
nboot <- 5000
newLambda_i <- rep(0, nboot)
newP_i <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars_i <- sample(caterpillars, n, replace = T)
newLambda_i[i] <- optim(2, caterpillar_negproflik, method = "Brent", lower = 2, upper = 50, data = newCaterpillars_i, choice = -1, hessian = TRUE)$par
newP_i[i] <- newLambda_i[i] / (mean(newCaterpillars_ii) + newLambda_i[i])
}
fit_1 <- optim(2, caterpillar_negproflik, method = "Brent", lower = 0.2, upper = 200, data = caterpillars, choice = -1)
set.seed(1)
nboot <- 5000
newLambda_i <- rep(0, nboot)
newP_i <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars_i <- sample(caterpillars, n, replace = T)
newLambda_i[i] <- optim(2, caterpillar_negproflik, method = "Brent", lower = 2, upper = 50, data = newCaterpillars_i, choice = -1, hessian = TRUE)$par
newP_i[i] <- newLambda_i[i] / (mean(newCaterpillars_i) + newLambda_i[i])
}
# hist(newLambda_i)
seLambda_i <- sd(newLambda_i)
seP_i <- sd(newP_i)
cat(" seLambda_i: ", seLambda_i, "\n", "seP_i: ", seP_i, "\n\n")
ciLambda_i <- quantile(newLambda_i, c(0.025, 0.975))
ciP_i <- quantile(newP_i, c(0.025, 0.975))
cat(" ciLambda_i: [", ciLambda_i[1], ",", ciLambda_i[2], "]\n", " ciP_i: [", ciP_i[1], ",", ciP_i[2], "]\n", sep = "")
library(tidyverse)
setwd("~/R/MATH551/Quiz/Quiz4/")
load("../M551Quiz2018.Rdata")
source("../hessian.R")
set.seed(1)
nboot <- 5000
newLambda_ii <- rep(0, nboot)
newP_ii <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars_ii <- rnbinom(n,5.029,0.793)
newLambda_ii[i] <- optim(2, caterpillar_negproflik, method = "Brent", lower = 2, upper = 50, data = newCaterpillars_ii, choice = -1, hessian = TRUE)$par
newP_ii[i] <- newLambda_ii[i] / (mean(newCaterpillars_ii) + newLambda_ii[i])
}
caterpillar_negproflik <- function(lambda, data, choice = 1) {
# if you would like to return negative result, then you can rewrite as "choice = -1".
z <- sum(
log(
(factorial(data + lambda - 1) / (factorial(data) * factorial(lambda - 1))) * ((1 - lambda / (mean(data) + lambda))^data) * ((lambda / (mean(data) + lambda))^lambda)
)
)
if (choice > 0) {
return(z)
}
else{
return(-z)
}
}
set.seed(1)
nboot <- 5000
newLambda_ii <- rep(0, nboot)
newP_ii <- rep(0, nboot)
n <- length(caterpillars)
for (i in 1:nboot) {
newCaterpillars_ii <- rnbinom(n,5.029,0.793)
newLambda_ii[i] <- optim(2, caterpillar_negproflik, method = "Brent", lower = 2, upper = 50, data = newCaterpillars_ii, choice = -1, hessian = TRUE)$par
newP_ii[i] <- newLambda_ii[i] / (mean(newCaterpillars_ii) + newLambda_ii[i])
}
# hist(newLambda_ii)
seLambda_ii <- sd(newLambda_ii)
seP_ii <- sd(newP_ii)
cat(" seLambda_ii:", seLambda_ii, "\n", "seP_ii:", seP_ii, "\n\n")
ciLambda_ii <- quantile(newLambda_ii, c(0.025, 0.975))
ciP_ii <- quantile(newP_ii, c(0.025, 0.975))
cat(" ciLambda_ii: [", ciLambda_ii[1], ",", ciLambda_ii[2], "]\n", " ciP_ii: [", ciP_ii[1], ",", ciP_ii[2], "]\n", sep = "")
runif
page(runif)
runif
rnorm
rexp
rbinom()
rbinom
rnbinom
methods(runif())
methods(runif
)
showMethods(runif)
getMethod(runif)
getMethod("runif")
runif
library(dplyr)
library(ggplot2)
setwd("~/R/MATH551/Quiz")
load("M551Quiz2018.Rdata")
source("hessian.R")
class(seeds)
seeds
#calc_lls <- function(lamda,p,r)
#cov = germinated
ll_seeds <- function(theta,datavec,cov,nTrials,choice=1){
alpha <- theta[1]
beta <- theta[2]
pi <- pnorm(alpha + beta * cov)
term1 <- sum(lfactorial(10)-lfactorial(datavec)-lfactorial(10-datavec))
term2 <- sum(datavec*log(pi))
term3 <- sum((10-datavec)*log(1-pi))
z <- (term1 + term2 + term3)
if (choice > 0) {
return(z)
} else {
return(-z)
}
}
theta_i <- c(-0.8, 0.2)
v1 <- ll_seeds(theta_i,seeds$Germinated,seeds$Fertiliser,10)
v1
#1
s1 <- optim(c(0.1,0.1),ll_seeds,datavec=seeds$Germinated,
cov=seeds$Fertiliser,choice=-1,hessian = T)
s1
#2 beta = 0
ll_seeds_b0 <- function(alpha,datavec,cov,nTrials,choice=1){
#alpha <- theta[1]
beta <- 0
pi <- pnorm(alpha)
term1 <- sum(lfactorial(10)-lfactorial(datavec)-lfactorial(10-datavec))
term2 <- sum(datavec*log(pi))
term3 <- sum((10-datavec)*log(1-pi))
z <- (term1 + term2 + term3)
if (choice > 0) {
return(z)
} else {
return(-z)
}
}
s2 <- optim(-1,ll_seeds_b0,method = "Brent",
lower=-1,upper=1,
datavec=seeds$Germinated,
cov=seeds$Fertiliser,choice=-1)
s2
pi_2 <- pnorm(s2$par)
pi_2
#3
lrs_3 <- 2 * (-s1$value + s2$value)
lrs_3
#4
pvalue <- 1 - pchisq(lrs_3,df=1)
pvalue
#6
#H <- hess(,s1$par,seeds$Germinated)
H1 <- s1$hessian
H
H1
optim
