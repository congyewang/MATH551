n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
n_ll_e <- function(b, datavec) {
z <- sum(
log(
(b * (10^b)) / (datavec^(b + 1))
)
)
return(-z)
}
set.seed(1)
nboot <- 5000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <- optim(1, n_ll_e, method = "Brent", lower = 1, upper = 20, data = newData)$par
}
# hist(newLambda_ii)
seBeta <- sd(newBeta)
ciLambda_ii <- quantile(newBeta, c(0.025, 0.975))
seBeta
ciLambda_ii
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
se
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <-n / (sum(log(newData)) - n * log(10))
}
seBeta <- sd(newBeta)
print(seBeta)
ciBeta <- quantile(newBeta, c(0.025, 0.975))
print(ciBeta)
n_ll_e <- function(b, datavec) {
z <- sum(
log(
(b * (10^b)) / (datavec^(b + 1))
)
)
return(-z)
}
set.seed(1)
nboot <- 5000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newBeta[i] <- optim(1, n_ll_e, method = "Brent", lower = 1, upper = 20, data = newData)$par
}
# hist(newLambda_ii)
seBeta <- sd(newBeta)
ciLambda_ii <- quantile(newBeta, c(0.025, 0.975))
seBeta
ciLambda_ii
set.seed(1)
nboot <- 10000
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newGamma[i] <- sqrt(n / (sum(log(newData)) - n * log(10)))
}
set.seed(1)
nboot <- 10000
newGamma <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newGamma[i] <- sqrt(n / (sum(log(newData)) - n * log(10)))
}
seBeta <- sd(newGamma)
print(newGamma)
ciGamma <- quantile(newGamma, c(0.025, 0.975))
print(ciGamma)
newGamma
set.seed(1)
nboot <- 10000
newGamma <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newGamma[i] <- (n / (sum(log(newData)) - n * log(10)))^0.5
}
seBeta <- sd(newGamma)
print(newGamma)
ciGamma <- quantile(newGamma, c(0.025, 0.975))
print(ciGamma)
set.seed(1)
nboot <- 10000
newGamma <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newGamma[i] <- (n / (sum(log(newData)) - n * log(10)))
}
seBeta <- sd(newGamma)
print(newGamma)
ciGamma <- quantile(newGamma, c(0.025, 0.975))
print(ciGamma)
set.seed(1)
nboot <- 10000
newGamma <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newGamma[i] <-n / (sum(log(newData)) - n * log(10))
}
seGamma <- sd(newGamma)
print(seGamma)
ciGamma <- quantile(newGamma, c(0.025, 0.975))
print(ciGamma)
set.seed(1)
nboot <- 10000
newGamma <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
newGamma[i] <- sqrt(n / (sum(log(newData)) - n * log(10)))
}
seGamma <- sd(newGamma)
print(seGamma)
ciGamma <- quantile(newGamma, c(0.025, 0.975))
print(ciGamma)
